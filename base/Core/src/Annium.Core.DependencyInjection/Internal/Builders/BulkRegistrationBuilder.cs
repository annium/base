using System;
using System.Collections.Generic;
using System.Linq;
using Annium.Core.DependencyInjection.Internal.Builders.Registrations;

namespace Annium.Core.DependencyInjection.Internal.Builders;

/// <summary>
/// Builder for bulk service registrations that allows filtering and configuration of multiple types
/// </summary>
internal class BulkRegistrationBuilder : IBulkRegistrationBuilderBase
{
    /// <summary>
    /// The collection of types to register
    /// </summary>
    private readonly List<Type> _types;

    /// <summary>
    /// The service container instance
    /// </summary>
    private readonly IServiceContainer _container;

    /// <summary>
    /// The registrar for handling service registrations
    /// </summary>
    private readonly Registrar _registrar;

    /// <summary>
    /// The collection of registrations to be processed
    /// </summary>
    private readonly RegistrationsCollection _registrations = new();

    /// <summary>
    /// Initializes a new instance of the BulkRegistrationBuilder class
    /// </summary>
    /// <param name="container">The service container</param>
    /// <param name="types">The types to register</param>
    /// <param name="registrar">The registrar for handling registrations</param>
    public BulkRegistrationBuilder(IServiceContainer container, IEnumerable<Type> types, Registrar registrar)
    {
        _types = types.ToList();
        _container = container;
        _registrar = registrar;
    }

    /// <summary>
    /// Filters the types to register based on the specified predicate
    /// </summary>
    /// <param name="predicate">The predicate to filter types</param>
    /// <returns>The bulk registration builder for method chaining</returns>
    public IBulkRegistrationBuilderBase Where(Func<Type, bool> predicate)
    {
        _types.RemoveAll(x => !predicate(x));

        return this;
    }

    /// <summary>
    /// Registers each type as itself
    /// </summary>
    /// <returns>The bulk registration builder target for method chaining</returns>
    public IBulkRegistrationBuilderTarget AsSelf()
    {
        return WithRegistration(type => new TypeRegistration(type, type));
    }

    /// <summary>
    /// Registers all types as the specified service type
    /// </summary>
    /// <param name="serviceType">The service type to register as</param>
    /// <returns>The bulk registration builder target for method chaining</returns>
    public IBulkRegistrationBuilderTarget As(Type serviceType)
    {
        return WithRegistration(type => new TypeRegistration(serviceType, type));
    }

    /// <summary>
    /// Registers each type as all of its implemented interfaces
    /// </summary>
    /// <returns>The bulk registration builder target for method chaining</returns>
    public IBulkRegistrationBuilderTarget AsInterfaces()
    {
        return WithRegistrations(type => type.GetInterfaces().Select(x => new TypeRegistration(x, type)));
    }

    /// <summary>
    /// Registers each type as itself with a key generated by the specified function
    /// </summary>
    /// <param name="getKey">The function to generate keys for each type</param>
    /// <returns>The bulk registration builder target for method chaining</returns>
    public IBulkRegistrationBuilderTarget AsKeyedSelf(Func<Type, object> getKey)
    {
        return WithRegistration(type => new KeyedTypeRegistration(type, getKey(type), type));
    }

    /// <summary>
    /// Registers all types as the specified service type with keys generated by the specified function
    /// </summary>
    /// <param name="serviceType">The service type to register as</param>
    /// <param name="getKey">The function to generate keys for each type</param>
    /// <returns>The bulk registration builder target for method chaining</returns>
    public IBulkRegistrationBuilderTarget AsKeyed(Type serviceType, Func<Type, object> getKey)
    {
        return WithRegistration(type => new KeyedTypeRegistration(serviceType, getKey(type), type));
    }

    /// <summary>
    /// Registers each type as a factory that returns itself
    /// </summary>
    /// <returns>The bulk registration builder target for method chaining</returns>
    public IBulkRegistrationBuilderTarget AsSelfFactory()
    {
        return WithRegistration(type => new TypeFactoryRegistration(type, type));
    }

    /// <summary>
    /// Registers all types as factories that return the specified service type
    /// </summary>
    /// <param name="serviceType">The service type the factory should return</param>
    /// <returns>The bulk registration builder target for method chaining</returns>
    public IBulkRegistrationBuilderTarget AsFactory(Type serviceType)
    {
        return WithRegistration(type => new TypeFactoryRegistration(serviceType, type));
    }

    /// <summary>
    /// Registers each type as a keyed factory that returns itself
    /// </summary>
    /// <param name="getKey">The function to generate keys for each type</param>
    /// <returns>The bulk registration builder target for method chaining</returns>
    public IBulkRegistrationBuilderTarget AsKeyedSelfFactory(Func<Type, object> getKey)
    {
        return WithRegistration(type => new KeyedTypeFactoryRegistration(type, getKey(type), type));
    }

    /// <summary>
    /// Registers all types as keyed factories that return the specified service type
    /// </summary>
    /// <param name="serviceType">The service type the factory should return</param>
    /// <param name="getKey">The function to generate keys for each type</param>
    /// <returns>The bulk registration builder target for method chaining</returns>
    public IBulkRegistrationBuilderTarget AsKeyedFactory(Type serviceType, Func<Type, object> getKey)
    {
        return WithRegistration(type => new KeyedTypeFactoryRegistration(serviceType, getKey(type), type));
    }

    /// <summary>
    /// Completes the registration with the specified lifetime
    /// </summary>
    /// <param name="lifetime">The service lifetime</param>
    /// <returns>The service container</returns>
    public IServiceContainer In(ServiceLifetime lifetime)
    {
        _registrations.AddRange(_types.Select(x => new TypeRegistration(x, x)));
        _registrar.Register(_registrations, lifetime);

        return _container;
    }

    /// <summary>
    /// Completes the registration with scoped lifetime
    /// </summary>
    /// <returns>The service container</returns>
    public IServiceContainer Scoped() => In(ServiceLifetime.Scoped);

    /// <summary>
    /// Completes the registration with singleton lifetime
    /// </summary>
    /// <returns>The service container</returns>
    public IServiceContainer Singleton() => In(ServiceLifetime.Singleton);

    /// <summary>
    /// Completes the registration with transient lifetime
    /// </summary>
    /// <returns>The service container</returns>
    public IServiceContainer Transient() => In(ServiceLifetime.Transient);

    /// <summary>
    /// Creates multiple registrations for each type using the specified factory function
    /// </summary>
    /// <param name="createRegistrations">The function to create registrations for each type</param>
    /// <returns>The bulk registration builder target for method chaining</returns>
    private IBulkRegistrationBuilderTarget WithRegistrations(Func<Type, IEnumerable<IRegistration>> createRegistrations)
    {
        _registrations.Init();
        _registrations.AddRange(_types.SelectMany(createRegistrations));

        return this;
    }

    /// <summary>
    /// Creates a single registration for each type using the specified factory function
    /// </summary>
    /// <param name="createRegistration">The function to create a registration for each type</param>
    /// <returns>The bulk registration builder target for method chaining</returns>
    private IBulkRegistrationBuilderTarget WithRegistration(Func<Type, IRegistration> createRegistration)
    {
        _registrations.Init();
        _registrations.AddRange(_types.Select(createRegistration));

        return this;
    }
}
