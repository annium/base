name: Release

on:
  push:
    branches:
      - main

permissions:
  contents: write

jobs:
  release:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '9.0.x'

      - name: Setup
        run: make setup

      - name: Format
        run: make format

      - name: Check for uncommitted changes
        run: |
          if [[ -n "$(git status --porcelain)" ]]; then
            echo "::error::Code formatting check failed. Please run 'make format' locally and commit the changes."
            git status
            exit 1
          fi

      - name: Get latest tag version
        id: get_version
        run: |
          TAG=$(git describe --tags --abbrev=0)
          echo "Last tag: $TAG"
          VERSION=${TAG#v}  # remove "v"
          IFS='.' read -r MAJOR MINOR PATCH <<< "$VERSION"
          PATCH=$((PATCH + 1))
          NEW_VERSION="$MAJOR.$MINOR.$PATCH"
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "patch=$PATCH" >> $GITHUB_OUTPUT

      - name: Build
        run: make build buildNumber=${{ steps.get_version.outputs.patch }}

      - name: Test
        run: make test

      - name: Publish Test Results
        uses: dorny/test-reporter@v2
        if: always()
        with:
          name: test-results
          artifact: test-results.trx
          path: '**/test-results.trx'
          reporter: dotnet-trx

      - name: Pack
        run: make pack buildNumber=${{ steps.get_version.outputs.patch }}

      - name: Publish NuGet packages
        run: make publish apiKey=${{ secrets.NUGET_API_KEY }}

      - name: Create Git tag
        run: |
          git config user.name "it"
          git config user.email "it@annium.com"
          git tag v${{ steps.get_version.outputs.new_version }}
          git push origin v${{ steps.get_version.outputs.new_version }} 